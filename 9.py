#!/usr/bin/python


import sys, re
from yapps import runtime

class WIFHScanner(runtime.Scanner):
    patterns = [
        ("'\\)'", re.compile('\\)')),
        ("'\\('", re.compile('\\(')),
        ('CHAR', re.compile('[A-Za-z]+')),
        ('NUM', re.compile('[0-9]+')),
        ('END', re.compile('$')),
    ]
    def __init__(self, str,*args,**kw):
        runtime.Scanner.__init__(self,None,{},str,*args,**kw)

class WIFH(runtime.Parser):
    Context = runtime.Context
    def str(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'str', [])
        CHAR = self._scan('CHAR', context=_context)
        result = CHAR
        while self._peek( context=_context) in ['CHAR', 'NUM']:
            _token = self._peek('CHAR', 'NUM', context=_context)
            if _token == 'CHAR':
                CHAR = self._scan('CHAR', context=_context)
                result += CHAR
            else: # == 'NUM'
                NUM = self._scan('NUM', context=_context)
                result += result[-1] * (int(NUM)-1)
        return result

    def repeat(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'repeat', [])
        self._scan("'\\('", context=_context)
        result = ""
        while self._peek("'\\)'", 'CHAR', "'\\('", context=_context) != "'\\)'":
            _token = self._peek('CHAR', "'\\('", context=_context)
            if _token == 'CHAR':
                str = self.str(_context)
                result += str
            else: # == "'\\('"
                repeat = self.repeat(_context)
                result += repeat
        self._scan("'\\)'", context=_context)
        NUM = self._scan('NUM', context=_context)
        return result * int(NUM)

    def expr(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'expr', [])
        result = ""
        while self._peek('CHAR', "'\\('", 'END', context=_context) != 'END':
            _token = self._peek('CHAR', "'\\('", context=_context)
            if _token == 'CHAR':
                str = self.str(_context)
                result += str
            else: # == "'\\('"
                repeat = self.repeat(_context)
                result += repeat
        return result

    def statement(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'statement', [])
        expr = self.expr(_context)
        END = self._scan('END', context=_context)
        return expr


def parse(rule, text):
    P = WIFH(WIFHScanner(text))
    return runtime.wrap_error_reporter(P, rule)

# End -- grammar generated by Yapps



for line in open("./code.txt", "r"):
    print parse("statement", line)
